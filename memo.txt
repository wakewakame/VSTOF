パラメータ付きグラフや、
単位線描画有りのグラフは、
オーバーロードではなく、
何の機能が付いているのかの情報を保持した
構造体を作成し、フレームが管理し、
パラメータや単位線はフレームを渡して、
それ単体で描画させる。
また、グラフの配列や最大値最小値は
1つの構造体にまとめて関数に渡す

必要なグラフの関数は全部で
1.塗りつぶし機能付き波形描画機能
2.最大最小パラメータ付き波形描画機能(数パターン用意)
3.指定数の汎用パラメータ付き波形描画関数機能
4.最大最小と指定数の汎用パラメータ付き波形描画機能
5.以上の各機能に波形をマウスで書き換え可能な関数
6.波形の範囲指定可能な波形描画関数(アクティブ時はスクロールで拡大縮小)

のようにオーバーロードでこれらをすべて実装すると大変ややこしくなるため
グラフを描画するためのクラスを新たに作る
それをGUIクラスでインスタンス化する。
また、波形本体や、最大最小、汎用すべてのパラメータなどを
構造体で一括りにして関数に渡すことにする。

と、思ったが、WIN_EVENT等を雑に設計したため、
GUIクラス外での関数作成はなかなか面倒になりそうなので、
オーバーロードや別途クラスを作るのではなく、
地道に関数を一つ一つ作ることにした
基底関数をグラフ描画のみの関数とし、
単位線の描画などは様々なグラフに汎用的な関数で
上書き形式である。
つまり、関数をレイヤーのように重ねて使うものとし、
1フレーム1つの関数を作ると言った面倒な作業がなくなる。
ここで重要なのができるだけ汎用的な関数にすることを
心がけること。

パラメータクラスをグラフパラメータクラスに変換する関数を作る

*具体的に